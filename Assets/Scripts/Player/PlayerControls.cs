//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Tap"",
            ""id"": ""b4f20794-5fe1-4ad4-b6f7-cb415573d084"",
            ""actions"": [
                {
                    ""name"": ""Go Up"",
                    ""type"": ""Button"",
                    ""id"": ""a9236d2d-d794-424c-9e20-f772c8b53ea4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d1f70937-4677-418f-ba4a-127258070ad0"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Go Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Swipe"",
            ""id"": ""ecb39b7f-b338-4335-a534-caa00efb520e"",
            ""actions"": [
                {
                    ""name"": ""Vehicle Teleport"",
                    ""type"": ""Value"",
                    ""id"": ""b57ec463-6f50-4c70-ae73-009e0a4bdd1b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""911c9b25-a2b7-400f-8169-d5ce77807085"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vehicle Teleport"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Tap
        m_Tap = asset.FindActionMap("Tap", throwIfNotFound: true);
        m_Tap_GoUp = m_Tap.FindAction("Go Up", throwIfNotFound: true);
        // Swipe
        m_Swipe = asset.FindActionMap("Swipe", throwIfNotFound: true);
        m_Swipe_VehicleTeleport = m_Swipe.FindAction("Vehicle Teleport", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Tap
    private readonly InputActionMap m_Tap;
    private List<ITapActions> m_TapActionsCallbackInterfaces = new List<ITapActions>();
    private readonly InputAction m_Tap_GoUp;
    public struct TapActions
    {
        private @PlayerControls m_Wrapper;
        public TapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @GoUp => m_Wrapper.m_Tap_GoUp;
        public InputActionMap Get() { return m_Wrapper.m_Tap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TapActions set) { return set.Get(); }
        public void AddCallbacks(ITapActions instance)
        {
            if (instance == null || m_Wrapper.m_TapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TapActionsCallbackInterfaces.Add(instance);
            @GoUp.started += instance.OnGoUp;
            @GoUp.performed += instance.OnGoUp;
            @GoUp.canceled += instance.OnGoUp;
        }

        private void UnregisterCallbacks(ITapActions instance)
        {
            @GoUp.started -= instance.OnGoUp;
            @GoUp.performed -= instance.OnGoUp;
            @GoUp.canceled -= instance.OnGoUp;
        }

        public void RemoveCallbacks(ITapActions instance)
        {
            if (m_Wrapper.m_TapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITapActions instance)
        {
            foreach (var item in m_Wrapper.m_TapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TapActions @Tap => new TapActions(this);

    // Swipe
    private readonly InputActionMap m_Swipe;
    private List<ISwipeActions> m_SwipeActionsCallbackInterfaces = new List<ISwipeActions>();
    private readonly InputAction m_Swipe_VehicleTeleport;
    public struct SwipeActions
    {
        private @PlayerControls m_Wrapper;
        public SwipeActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @VehicleTeleport => m_Wrapper.m_Swipe_VehicleTeleport;
        public InputActionMap Get() { return m_Wrapper.m_Swipe; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwipeActions set) { return set.Get(); }
        public void AddCallbacks(ISwipeActions instance)
        {
            if (instance == null || m_Wrapper.m_SwipeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwipeActionsCallbackInterfaces.Add(instance);
            @VehicleTeleport.started += instance.OnVehicleTeleport;
            @VehicleTeleport.performed += instance.OnVehicleTeleport;
            @VehicleTeleport.canceled += instance.OnVehicleTeleport;
        }

        private void UnregisterCallbacks(ISwipeActions instance)
        {
            @VehicleTeleport.started -= instance.OnVehicleTeleport;
            @VehicleTeleport.performed -= instance.OnVehicleTeleport;
            @VehicleTeleport.canceled -= instance.OnVehicleTeleport;
        }

        public void RemoveCallbacks(ISwipeActions instance)
        {
            if (m_Wrapper.m_SwipeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwipeActions instance)
        {
            foreach (var item in m_Wrapper.m_SwipeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwipeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwipeActions @Swipe => new SwipeActions(this);
    public interface ITapActions
    {
        void OnGoUp(InputAction.CallbackContext context);
    }
    public interface ISwipeActions
    {
        void OnVehicleTeleport(InputAction.CallbackContext context);
    }
}
